{
  "address": "0xbDB4886905435F9031E6FbE4E1aDB920Ff1C4A22",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "loyaltyCardMasterAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "addPoints",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loyaltyCardMaster",
      "outputs": [
        {
          "internalType": "contract ILoyaltyCardMaster",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemPointsForBenefit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3079c31b92b101c95908977cc5300518234fb4bf5991b66b4be58e24de541cc4",
  "receipt": {
    "to": null,
    "from": "0x281f0d74Fa356C17E36603995e0f50D298d4a5A9",
    "contractAddress": "0xbDB4886905435F9031E6FbE4E1aDB920Ff1C4A22",
    "transactionIndex": 8,
    "gasUsed": "581823",
    "logsBloom": "0x
    "blockHash": "0xa2cc808be8bf074008a059b6a9f48ac0f89fe8183063274f51f2181e644c6ffd",
    "transactionHash": "0x3079c31b92b101c95908977cc5300518234fb4bf5991b66b4be58e24de541cc4",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 19664936,
        "transactionHash": "0x3079c31b92b101c95908977cc5300518234fb4bf5991b66b4be58e24de541cc4",
        "address": "0xbDB4886905435F9031E6FbE4E1aDB920Ff1C4A22",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000281f0d74fa356c17e36603995e0f50d298d4a5a9"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xa2cc808be8bf074008a059b6a9f48ac0f89fe8183063274f51f2181e644c6ffd"
      }
    ],
    "blockNumber": 19664936,
    "cumulativeGasUsed": "1588725",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x54897707cD993761fC5Ed333283014A28C50896d"
  ],
  "numDeployments": 1,
  "solcInputHash": "b045a79c1d1f130feafe624c5f839bab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"loyaltyCardMasterAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"addPoints\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loyaltyCardMaster\",\"outputs\":[{\"internalType\":\"contract ILoyaltyCardMaster\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemPointsForBenefit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is responsible for ensuring that benefits are actually given upon loyalty point redemption. If there is any on-chain logic in this regard (associated with redemption), it should executed by this contract.\",\"kind\":\"dev\",\"methods\":{\"addPoints(uint256,uint256)\":{\"details\":\"Typically this would be called internally, but for this contract stub we allow the owner to call it.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"LoyaltyCardOperator is meant to be used as an operator on the Impossible Finance LoyaltyCardMaster contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract can add and redeem loyalty points for benefits associated to the loyalty card nft holders.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LoyaltyCardOperator.sol\":\"LoyaltyCardOperator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0d4de01fe5360c38b4ad2b0822a12722958428f5138a7ff47c1720eb6fa52bba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/ILoyaltyCardMaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n  @title Interface for the loyalty card use-case-specific functions \\n         of the Impossible Finance LoyaltyCardMaster contract\\n  @author Impossible Finance\\n */\\ninterface ILoyaltyCardMaster {\\n    function mint(address to) external;\\n\\n    function setMinter(address _minter) external;\\n\\n    function setBurner(address _burner) external;\\n\\n    function burn(uint256 tokenId) external;\\n\\n    function totalPoints(uint256 tokenId) external;\\n\\n    function currentPoints(uint256 tokenId) external;\\n\\n    function addPoints(uint256 tokenId, uint256 points) external;\\n\\n    function redeemPoints(uint256 tokenId, uint256 points) external;\\n\\n    function isDestination(address dest) external;\\n\\n    function addDestination(address destinationToAdd) external;\\n\\n    function removeDestination(address destinationToRemove) external;\\n\\n    function isOperator(address op) external;\\n\\n    function addOperator(address operatorToAdd) external;\\n\\n    function removeOperator(address operatorToRemove) external;\\n}\\n\",\"keccak256\":\"0x9adff686938b4c3318ad1c87e0276d41a118552b2a6bc78bc85918d507567ab4\",\"license\":\"MIT\"},\"contracts/LoyaltyCardOperator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ILoyaltyCardMaster.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n  @title LoyaltyCardOperator is meant to be used as an operator on the Impossible Finance LoyaltyCardMaster contract\\n  @notice This contract can add and redeem loyalty points for benefits associated to the loyalty card nft holders.\\n  @dev This contract is responsible for ensuring that benefits are actually given upon loyalty point redemption.\\n  If there is any on-chain logic in this regard (associated with redemption), it should executed by this contract.\\n */\\n\\ncontract LoyaltyCardOperator is Ownable {\\n    ILoyaltyCardMaster public loyaltyCardMaster;\\n\\n    constructor(address loyaltyCardMasterAddress) {\\n        loyaltyCardMaster = ILoyaltyCardMaster(loyaltyCardMasterAddress);\\n    }\\n\\n    /**\\n      @dev Typically this would be called internally, but for this contract stub we allow the owner to call it.\\n     */\\n    function addPoints(uint256 tokenId, uint256 amount) public onlyOwner {\\n        loyaltyCardMaster.addPoints(tokenId, amount);\\n    }\\n\\n    function redeemPointsForBenefit(uint256 tokenId, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        loyaltyCardMaster.redeemPoints(tokenId, amount);\\n\\n        // TODO logic that gives benefit to cardOwner\\n        // address cardOwner = IERC721(address(loyaltyCardMaster)).ownerOf(tokenId);\\n    }\\n\\n    // redeemPointsForBenefit2(...) -> we'd use more revealing names, but the idea is to have a separate\\n    // function for each benefit (makes operating this contract less prone to human error)\\n}\\n\",\"keccak256\":\"0x85dffb0264fe8064c90027a3fba51216508a3d02ede72507ac485096a9f57758\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610a9f380380610a9f83398181016040528101906100329190610176565b61004e61004361009560201b60201c565b61009d60201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506101e8565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050610170816101d1565b92915050565b60006020828403121561018857600080fd5b600061019684828501610161565b91505092915050565b60006101aa826101b1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6101da8161019f565b81146101e557600080fd5b50565b6108a8806101f76000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80631b6a630a14610067578063715018a6146100855780638da5cb5b1461008f578063f2fde38b146100ad578063fe4651a0146100c9578063fea74a4e146100e5575b600080fd5b61006f610101565b60405161007c91906106d7565b60405180910390f35b61008d610127565b005b6100976101af565b6040516100a491906106bc565b60405180910390f35b6100c760048036038101906100c291906105e4565b6101d8565b005b6100e360048036038101906100de919061060d565b6102d0565b005b6100ff60048036038101906100fa919061060d565b6103df565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61012f6104ee565b73ffffffffffffffffffffffffffffffffffffffff1661014d6101af565b73ffffffffffffffffffffffffffffffffffffffff16146101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019a90610712565b60405180910390fd5b6101ad60006104f6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101e06104ee565b73ffffffffffffffffffffffffffffffffffffffff166101fe6101af565b73ffffffffffffffffffffffffffffffffffffffff1614610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b90610712565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb906106f2565b60405180910390fd5b6102cd816104f6565b50565b6102d86104ee565b73ffffffffffffffffffffffffffffffffffffffff166102f66101af565b73ffffffffffffffffffffffffffffffffffffffff161461034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390610712565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe4651a083836040518363ffffffff1660e01b81526004016103a9929190610732565b600060405180830381600087803b1580156103c357600080fd5b505af11580156103d7573d6000803e3d6000fd5b505050505050565b6103e76104ee565b73ffffffffffffffffffffffffffffffffffffffff166104056101af565b73ffffffffffffffffffffffffffffffffffffffff161461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290610712565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2e7043183836040518363ffffffff1660e01b81526004016104b8929190610732565b600060405180830381600087803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506105c981610844565b92915050565b6000813590506105de8161085b565b92915050565b6000602082840312156105f657600080fd5b6000610604848285016105ba565b91505092915050565b6000806040838503121561062057600080fd5b600061062e858286016105cf565b925050602061063f858286016105cf565b9150509250929050565b6106528161076c565b82525050565b610661816107a8565b82525050565b600061067460268361075b565b915061067f826107cc565b604082019050919050565b600061069760208361075b565b91506106a28261081b565b602082019050919050565b6106b68161079e565b82525050565b60006020820190506106d16000830184610649565b92915050565b60006020820190506106ec6000830184610658565b92915050565b6000602082019050818103600083015261070b81610667565b9050919050565b6000602082019050818103600083015261072b8161068a565b9050919050565b600060408201905061074760008301856106ad565b61075460208301846106ad565b9392505050565b600082825260208201905092915050565b60006107778261077e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107b3826107ba565b9050919050565b60006107c58261077e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61084d8161076c565b811461085857600080fd5b50565b6108648161079e565b811461086f57600080fd5b5056fea2646970667358221220979a9da47262152539747830238343b5be6b6d44e96dbde64860cc6ec543639c64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80631b6a630a14610067578063715018a6146100855780638da5cb5b1461008f578063f2fde38b146100ad578063fe4651a0146100c9578063fea74a4e146100e5575b600080fd5b61006f610101565b60405161007c91906106d7565b60405180910390f35b61008d610127565b005b6100976101af565b6040516100a491906106bc565b60405180910390f35b6100c760048036038101906100c291906105e4565b6101d8565b005b6100e360048036038101906100de919061060d565b6102d0565b005b6100ff60048036038101906100fa919061060d565b6103df565b005b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61012f6104ee565b73ffffffffffffffffffffffffffffffffffffffff1661014d6101af565b73ffffffffffffffffffffffffffffffffffffffff16146101a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161019a90610712565b60405180910390fd5b6101ad60006104f6565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6101e06104ee565b73ffffffffffffffffffffffffffffffffffffffff166101fe6101af565b73ffffffffffffffffffffffffffffffffffffffff1614610254576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024b90610712565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156102c4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102bb906106f2565b60405180910390fd5b6102cd816104f6565b50565b6102d86104ee565b73ffffffffffffffffffffffffffffffffffffffff166102f66101af565b73ffffffffffffffffffffffffffffffffffffffff161461034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034390610712565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe4651a083836040518363ffffffff1660e01b81526004016103a9929190610732565b600060405180830381600087803b1580156103c357600080fd5b505af11580156103d7573d6000803e3d6000fd5b505050505050565b6103e76104ee565b73ffffffffffffffffffffffffffffffffffffffff166104056101af565b73ffffffffffffffffffffffffffffffffffffffff161461045b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045290610712565b60405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c2e7043183836040518363ffffffff1660e01b81526004016104b8929190610732565b600060405180830381600087803b1580156104d257600080fd5b505af11580156104e6573d6000803e3d6000fd5b505050505050565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000813590506105c981610844565b92915050565b6000813590506105de8161085b565b92915050565b6000602082840312156105f657600080fd5b6000610604848285016105ba565b91505092915050565b6000806040838503121561062057600080fd5b600061062e858286016105cf565b925050602061063f858286016105cf565b9150509250929050565b6106528161076c565b82525050565b610661816107a8565b82525050565b600061067460268361075b565b915061067f826107cc565b604082019050919050565b600061069760208361075b565b91506106a28261081b565b602082019050919050565b6106b68161079e565b82525050565b60006020820190506106d16000830184610649565b92915050565b60006020820190506106ec6000830184610658565b92915050565b6000602082019050818103600083015261070b81610667565b9050919050565b6000602082019050818103600083015261072b8161068a565b9050919050565b600060408201905061074760008301856106ad565b61075460208301846106ad565b9392505050565b600082825260208201905092915050565b60006107778261077e565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006107b3826107ba565b9050919050565b60006107c58261077e565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b61084d8161076c565b811461085857600080fd5b50565b6108648161079e565b811461086f57600080fd5b5056fea2646970667358221220979a9da47262152539747830238343b5be6b6d44e96dbde64860cc6ec543639c64736f6c63430008040033",
  "devdoc": {
    "details": "This contract is responsible for ensuring that benefits are actually given upon loyalty point redemption. If there is any on-chain logic in this regard (associated with redemption), it should executed by this contract.",
    "kind": "dev",
    "methods": {
      "addPoints(uint256,uint256)": {
        "details": "Typically this would be called internally, but for this contract stub we allow the owner to call it."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "LoyaltyCardOperator is meant to be used as an operator on the Impossible Finance LoyaltyCardMaster contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract can add and redeem loyalty points for benefits associated to the loyalty card nft holders.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LoyaltyCardOperator.sol:LoyaltyCardOperator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2243,
        "contract": "contracts/LoyaltyCardOperator.sol:LoyaltyCardOperator",
        "label": "loyaltyCardMaster",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ILoyaltyCardMaster)1765"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ILoyaltyCardMaster)1765": {
        "encoding": "inplace",
        "label": "contract ILoyaltyCardMaster",
        "numberOfBytes": "20"
      }
    }
  }
}